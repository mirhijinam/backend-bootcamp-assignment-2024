// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DummyLoginGetParams is parameters of GET /dummyLogin operation.
type DummyLoginGetParams struct {
	UserType UserType
}

func unpackDummyLoginGetParams(packed middleware.Parameters) (params DummyLoginGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_type",
			In:   "query",
		}
		params.UserType = packed[key].(UserType)
	}
	return params
}

func decodeDummyLoginGetParams(args [0]string, argsEscaped bool, r *http.Request) (params DummyLoginGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: user_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "user_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserType = UserType(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.UserType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// HouseIDGetParams is parameters of GET /house/{id} operation.
type HouseIDGetParams struct {
	ID HouseId
}

func unpackHouseIDGetParams(packed middleware.Parameters) (params HouseIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(HouseId)
	}
	return params
}

func decodeHouseIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params HouseIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = HouseId(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HouseIDSubscribePostParams is parameters of POST /house/{id}/subscribe operation.
type HouseIDSubscribePostParams struct {
	ID HouseId
}

func unpackHouseIDSubscribePostParams(packed middleware.Parameters) (params HouseIDSubscribePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(HouseId)
	}
	return params
}

func decodeHouseIDSubscribePostParams(args [1]string, argsEscaped bool, r *http.Request) (params HouseIDSubscribePostParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = HouseId(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
