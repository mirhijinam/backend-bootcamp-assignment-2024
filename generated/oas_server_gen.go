// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DummyLoginGet implements GET /dummyLogin operation.
	//
	// Упрощенный процесс получения токена для дальнейшего
	// прохождения авторизации.
	//
	// GET /dummyLogin
	DummyLoginGet(ctx context.Context, params DummyLoginGetParams) (DummyLoginGetRes, error)
	// FlatCreatePost implements POST /flat/create operation.
	//
	// Создание квартиры. Квартира создается в статусе created.
	//
	// POST /flat/create
	FlatCreatePost(ctx context.Context, req OptFlatCreatePostReq) (FlatCreatePostRes, error)
	// FlatUpdatePost implements POST /flat/update operation.
	//
	// Обновление квартиры.
	//
	// POST /flat/update
	FlatUpdatePost(ctx context.Context, req OptFlatUpdatePostReq) (FlatUpdatePostRes, error)
	// HouseCreatePost implements POST /house/create operation.
	//
	// Создание нового дома.
	//
	// POST /house/create
	HouseCreatePost(ctx context.Context, req OptHouseCreatePostReq) (HouseCreatePostRes, error)
	// HouseIDGet implements GET /house/{id} operation.
	//
	// Получение квартир в выбранном доме. Для обычных
	// пользователей возвращаются только квартиры в
	// статусе approved, для модераторов - в любом статусе.
	//
	// GET /house/{id}
	HouseIDGet(ctx context.Context, params HouseIDGetParams) (HouseIDGetRes, error)
	// HouseIDSubscribePost implements POST /house/{id}/subscribe operation.
	//
	// Дополнительное задание. Подписаться на уведомления о
	// новых квартирах в доме.
	//
	// POST /house/{id}/subscribe
	HouseIDSubscribePost(ctx context.Context, req OptHouseIDSubscribePostReq, params HouseIDSubscribePostParams) (HouseIDSubscribePostRes, error)
	// LoginPost implements POST /login operation.
	//
	// Дополнительное задание. Процесс аутентификации
	// путем передачи идентификатор+пароля пользователя и
	// получения токена для дальнейшего прохождения
	// авторизации.
	//
	// POST /login
	LoginPost(ctx context.Context, req OptLoginPostReq) (LoginPostRes, error)
	// RegisterPost implements POST /register operation.
	//
	// Дополнительное задание. Регистрация нового
	// пользователя.
	//
	// POST /register
	RegisterPost(ctx context.Context, req OptRegisterPostReq) (RegisterPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
