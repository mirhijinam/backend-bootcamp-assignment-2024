// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/flats/flats.go

// Package flats is a generated GoMock package.
package flats

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/mirhijinam/backend-bootcamp-assignment-2024/internal/models"
	dto "github.com/mirhijinam/backend-bootcamp-assignment-2024/internal/models/dto"
)

// Mocktransactor is a mock of transactor interface.
type Mocktransactor struct {
	ctrl     *gomock.Controller
	recorder *MocktransactorMockRecorder
}

// MocktransactorMockRecorder is the mock recorder for Mocktransactor.
type MocktransactorMockRecorder struct {
	mock *Mocktransactor
}

// NewMocktransactor creates a new mock instance.
func NewMocktransactor(ctrl *gomock.Controller) *Mocktransactor {
	mock := &Mocktransactor{ctrl: ctrl}
	mock.recorder = &MocktransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransactor) EXPECT() *MocktransactorMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *Mocktransactor) Do(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MocktransactorMockRecorder) Do(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*Mocktransactor)(nil).Do), ctx, fn)
}

// MockflatsRepo is a mock of flatsRepo interface.
type MockflatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockflatsRepoMockRecorder
}

// MockflatsRepoMockRecorder is the mock recorder for MockflatsRepo.
type MockflatsRepoMockRecorder struct {
	mock *MockflatsRepo
}

// NewMockflatsRepo creates a new mock instance.
func NewMockflatsRepo(ctrl *gomock.Controller) *MockflatsRepo {
	mock := &MockflatsRepo{ctrl: ctrl}
	mock.recorder = &MockflatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockflatsRepo) EXPECT() *MockflatsRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockflatsRepo) Create(ctx context.Context, flat dto.NewFlat) (models.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, flat)
	ret0, _ := ret[0].(models.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockflatsRepoMockRecorder) Create(ctx, flat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockflatsRepo)(nil).Create), ctx, flat)
}

// Get mocks base method.
func (m *MockflatsRepo) Get(ctx context.Context, number, houseId int) (models.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, number, houseId)
	ret0, _ := ret[0].(models.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockflatsRepoMockRecorder) Get(ctx, number, houseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockflatsRepo)(nil).Get), ctx, number, houseId)
}

// UpdateStatus mocks base method.
func (m *MockflatsRepo) UpdateStatus(ctx context.Context, params dto.FlatUpdateParams) (models.Status, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, params)
	ret0, _ := ret[0].(models.Status)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockflatsRepoMockRecorder) UpdateStatus(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockflatsRepo)(nil).UpdateStatus), ctx, params)
}

// MockhousesRepo is a mock of housesRepo interface.
type MockhousesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockhousesRepoMockRecorder
}

// MockhousesRepoMockRecorder is the mock recorder for MockhousesRepo.
type MockhousesRepoMockRecorder struct {
	mock *MockhousesRepo
}

// NewMockhousesRepo creates a new mock instance.
func NewMockhousesRepo(ctrl *gomock.Controller) *MockhousesRepo {
	mock := &MockhousesRepo{ctrl: ctrl}
	mock.recorder = &MockhousesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhousesRepo) EXPECT() *MockhousesRepoMockRecorder {
	return m.recorder
}

// GetHouseById mocks base method.
func (m *MockhousesRepo) GetHouseById(ctx context.Context, houseId int) (models.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHouseById", ctx, houseId)
	ret0, _ := ret[0].(models.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHouseById indicates an expected call of GetHouseById.
func (mr *MockhousesRepoMockRecorder) GetHouseById(ctx, houseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHouseById", reflect.TypeOf((*MockhousesRepo)(nil).GetHouseById), ctx, houseId)
}

// Update mocks base method.
func (m *MockhousesRepo) Update(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockhousesRepoMockRecorder) Update(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockhousesRepo)(nil).Update), ctx)
}
